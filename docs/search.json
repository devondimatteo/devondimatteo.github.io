[
  {
    "objectID": "basic-example.html",
    "href": "basic-example.html",
    "title": "Habbit",
    "section": "",
    "text": "(tab content) 1\n\n\n\n(tab content) 2\n\nlibrary(tidyverse)\nggplot(mpg) +\n  geom_boxplot(aes(x = class, y = hwy))"
  },
  {
    "objectID": "basic-example.html#section-x",
    "href": "basic-example.html#section-x",
    "title": "Habbit",
    "section": "0.2 Section X",
    "text": "0.2 Section X\nThis is my introduction.\n\nx <- 1\nprint(x)\n\n[1] 1"
  },
  {
    "objectID": "basic-example.html#section-1.1",
    "href": "basic-example.html#section-1.1",
    "title": "Habbit",
    "section": "1.1 Section 1.1",
    "text": "1.1 Section 1.1\nDrink water"
  },
  {
    "objectID": "basic-example.html#section-1.2",
    "href": "basic-example.html#section-1.2",
    "title": "Habbit",
    "section": "1.2 Section 1.2",
    "text": "1.2 Section 1.2\nSleep again"
  },
  {
    "objectID": "DANL310_hw1_dimatteo_devon.html",
    "href": "DANL310_hw1_dimatteo_devon.html",
    "title": "Homework 1",
    "section": "",
    "text": "#Question 2A\n\nncdc_temp <- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\nncdc_temp\n\n# A tibble: 1,464 × 7\n   station_id  month   day temperature flag  date       location    \n   <chr>       <chr> <dbl>       <dbl> <chr> <date>     <chr>       \n 1 USC00042319 01        1        51   S     0000-01-01 Death Valley\n 2 USC00042319 01        2        51.2 S     0000-01-02 Death Valley\n 3 USC00042319 01        3        51.3 S     0000-01-03 Death Valley\n 4 USC00042319 01        4        51.4 S     0000-01-04 Death Valley\n 5 USC00042319 01        5        51.6 S     0000-01-05 Death Valley\n 6 USC00042319 01        6        51.7 S     0000-01-06 Death Valley\n 7 USC00042319 01        7        51.9 S     0000-01-07 Death Valley\n 8 USC00042319 01        8        52   S     0000-01-08 Death Valley\n 9 USC00042319 01        9        52.2 S     0000-01-09 Death Valley\n10 USC00042319 01       10        52.3 S     0000-01-10 Death Valley\n# … with 1,454 more rows\n\nncdc_temp1 <- ncdc_temp %>% \n  group_by(location, month) %>% \n  mutate(temp_mean = mean(temperature))\nview(ncdc_temp1)\np1 <- ggplot(data = ncdc_temp1, aes(y = temp_mean, x = month, color = location))\np1 + geom_point()+\n  geom_line()\n\n\n\n\n#Question 2B\n\nncdc_temp2 <- ncdc_temp %>% \n  group_by(month) %>% \n  mutate(temp_mean = mean(temperature))\nview(ncdc_temp1)\np2 <- ggplot(data = ncdc_temp2, aes(y = temperature, x = month))\np2 + geom_boxplot()+\n  labs(y=\"mean temperature (F°)\")+\n  theme(panel.border = element_rect(color = \"black\", fill=NA, size = 2))\n\n\n\n\n#Question 2C\n\nggridges::geom_density_ridges()\n\ngeom_density_ridges: na.rm = FALSE, panel_scaling = TRUE\nstat_density_ridges: na.rm = FALSE\nposition_points_sina \n\nncdc_temp3 <- ncdc_temp %>% \n  group_by(month) %>% \n  mutate(temp_mean = mean(temperature))\np3 <- ggplot(data = ncdc_temp3, aes(y = month, x = temperature))\np3 + ggridges::geom_density_ridges(fill = \"blue\")+\n  labs(y=\"mean temperature (F°)\")\n\n\n\n\n#Question 2D\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\np4 <- ggplot(mtcars, aes(x = disp, y = mpg, color = hp))\np4 + geom_point()+\n  labs(x = \"displacement(cu. in.\", y = \"fuel efficiency(mpg)\")\n\n\n\n\n#Question 2E\n\npopgrowth_df <- read_csv(\n  'https://bcdanl.github.io/data/popgrowth.csv')\nview(popgrowth_df)\np5 <- ggplot(popgrowth_df, \n             aes( x = reorder(state,popgrowth), \n                  y = popgrowth, \n                  fill = region))\n\n#Question 2F\n\nmale_Aus <- read_csv(\n  'https://bcdanl.github.io/data/aus_athletics_male.csv')\nmale_Aus\n\n# A tibble: 83 × 13\n     rcc   wcc    hc    hg  ferr   bmi   ssf pcBfat   lbm height weight sex  \n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl> <chr>\n 1  5.13   7.1  46.8  15.9    34  22.5  44.5   8.47    61   173.   67   m    \n 2  4.83   7.6  45.2  15.2    97  23.9  41.8   7.68    69   176.   74.4 m    \n 3  5.09   4.7  46.6  15.9    55  23.7  33.7   6.16    74   183    79.3 m    \n 4  5.17   4.1  44.9  15      76  23.2  50.9   8.56    80   194.   87.5 m    \n 5  5.11   6.7  46.1  15.6    93  22.3  40.5   6.86    78   193.   83.5 m    \n 6  5.03   7.1  45.1  15.2    46  24.0  51.2   9.4     71   180.   78   m    \n 7  5.32   6    47.5  16.3   155  23.3  54.4   9.17    71   183    78   m    \n 8  4.75   8.6  45.5  15.2    99  25.1  52.3   8.54    78   184    85   m    \n 9  5.34   6.6  48.6  16.5    35  22.8  57     9.2     77   193.   84.7 m    \n10  4.87   4.8  44.9  15.4   124  26.2  65.3  11.7     81   187.   92   m    \n# … with 73 more rows, and 1 more variable: sport <chr>\n\np6 <- ggplot(data = male_Aus, aes(y = pcBfat, x = height))\np6 + geom_point()\n\n\n\n\n#Question 2G\n\ntitanic <- read_csv(\n  'https://bcdanl.github.io/data/titanic_cleaned.csv')\ntitanic\n\n# A tibble: 756 × 4\n   class   age sex    survived\n   <chr> <dbl> <chr>  <lgl>   \n 1 1st   29    female TRUE    \n 2 1st    2    female FALSE   \n 3 1st   30    male   FALSE   \n 4 1st   25    female FALSE   \n 5 1st    0.92 male   TRUE    \n 6 1st   47    male   TRUE    \n 7 1st   63    female TRUE    \n 8 1st   39    male   FALSE   \n 9 1st   58    female TRUE    \n10 1st   71    male   FALSE   \n# … with 746 more rows\n\ntitanic1 <- titanic %>% \n  group_by(sex) %>% \n  summarize(N = n()) %>% \n  mutate(count = N)\np7 <- ggplot(titanic, aes(x=age)) + \n  geom_density()+\n  facet_wrap(facets = \"sex\")+\n  geom_density()\n  labs(x = \"passenger age (years)\", y = \"count\")\n\n$x\n[1] \"passenger age (years)\"\n\n$y\n[1] \"count\"\n\nattr(,\"class\")\n[1] \"labels\"\n\np7\n\n\n\n\n\ncows_filtered <- read_csv(\n  'https://bcdanl.github.io/data/cows_filtered.csv')\ncows_filtered\n\n# A tibble: 80 × 3\n   butterfat age    breed   \n       <dbl> <chr>  <chr>   \n 1      3.74 Mature Ayrshire\n 2      4.01 Mature Ayrshire\n 3      3.77 Mature Ayrshire\n 4      3.78 Mature Ayrshire\n 5      4.1  Mature Ayrshire\n 6      4.06 Mature Ayrshire\n 7      4.27 Mature Ayrshire\n 8      3.94 Mature Ayrshire\n 9      4.11 Mature Ayrshire\n10      4.25 Mature Ayrshire\n# … with 70 more rows\n\ncows_filtered1 <- cows_filtered %>% \n  group_by(breed)\np7 <- ggplot(cows_filtered1, aes(x=butterfat)) + \n  geom_density()\np7\n\n\n\n\n\n#https://devondimatteo.github.io/"
  },
  {
    "objectID": "DANL310_hw2_DiMatteo_Devon.html",
    "href": "DANL310_hw2_DiMatteo_Devon.html",
    "title": "Homework 2",
    "section": "",
    "text": "#2A\nhdi_corruption <- read_csv(\n  'https://bcdanl.github.io/data/hdi_corruption.csv')\ndf1 <- hdi_corruption %>% \n  group_by(region)\np1 <- ggplot(data = df1, aes(y = hdi, x = cpi), color = region)+\n  geom_point()+\n  labs(x = \"Corruption Perception Index, 2014 (100 = least corrupt)\", \n       y = \"Human Development Index, 2014 (1.0 = most developed\")\np1 + geom_smooth()\n\n\n\np1\n\n\n\n\n\n#2B\n\n# library(readr)\nlabor_supply <- read_csv(\"C:/Users/Devon DiMatteo/Downloads/labor_supply (1).zip\")\ndf <- labor_supply %>% \n  group_by(YEAR) %>% \n  mutate(pop = sum(ASECWT)) %>% \n  mutate(child = ifelse(NCHLT5 < 5, \"Having a Child Under Age 5 in Household\"\n                        , \"No Child Under Age 5 in Highschool\"))\n  \np2 <- ggplot(data = df, aes(y = pop, x = YEAR))+\n  geom_line()+\n  facet_wrap(child ~ .)+\n  labs(y = \"Labor Force Participation Rate\")\np2\n\n\n\n\n\n#2C\n#install.packages(\"ggcorrplot\")\nlibrary(ggcorrplot) # to create correlation heatmaps using ggcorrplot()\n\nbeer_mkt <- read_csv('https://bcdanl.github.io/data/beer_markets.csv')\n\nbeer_dummies <- beer_mkt %>% select(-hh, -market) \nreg <- lm(data = beer_dummies,\n          beer_floz ~ .)\nbeer_dummies <-  as.data.frame(model.matrix(reg))[, -1]\nbeer_dummies <- cbind(beer_mkt$beer_floz ,beer_dummies)\nbeer_dummies <- beer_dummies %>% \n  rename(beer_floz = `beer_mkt$beer_floz`)\n\ncorrelation <- as.data.frame(cor(beer_dummies))\n\n#NY markets are\n#ALBANY, BUFFALO-ROCHESTER, RURAL NEW YORK, URBAN NY, \n#SUBURBAN NY, EXURBAN NY, SYRACUSE\n\n\np3 <- ggcorrplot(correlation)\np3"
  },
  {
    "objectID": "DANL310_midterm_DiMatteo_Devon.html",
    "href": "DANL310_midterm_DiMatteo_Devon.html",
    "title": "DANL 310: Data Visualization and Presentation Midterm Exam",
    "section": "",
    "text": "I solemnly swear that I will not cheat or engage in any form of academic dishonesty during this exam.\n\nI will not communicate with other students or use unauthorized materials.\n\nI will uphold the integrity of this exam and demonstrate my own knowledge and abilities.\n\nBy taking this pledge, I acknowledge that academic dishonesty undermines the academic process and is a violation of the trust placed in me as a student.\n\nI accept the consequences of any violation of this promise.\n\nStudent’s Signature: Devon DiMatteo\n\n\nThe midterm exam questions are provided in the following webpage: - https://bcdanl.github.io/DANL310-midterm-q.html.\n\n\n\n\nlibrary(knitr)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(socviz)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\nlibrary(gapminder)\n\n\nhrbrthemes::theme_ipsum() or theme_minimal() can be used for your ggplot theme."
  },
  {
    "objectID": "Homework-3-Danl310.html",
    "href": "Homework-3-Danl310.html",
    "title": "Homework 3",
    "section": "",
    "text": "library(shiny)\n\nWarning: package 'shiny' was built under R version 4.2.3\n\n#install.packages(\"shinythemes\")\nlibrary(shinythemes)\n\nWarning: package 'shinythemes' was built under R version 4.2.3\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ndata(\"faithful\")\ndf <- faithful\n\ndf1 <- faithful %>%\n  summarize(count = n()) %>%\n  arrange(desc(count))\n\n\n#ui <- fluidPage(theme = shinytheme(\"yeti\"),\n  \n#  titlePanel(\"Old Faithful Geyser Data\"),\n  \n#  sidebarLayout(\n\n#    sidebarPanel(\n#      selectInput(\"stormStatus\",\n#                  label = \"Filter by storm type: \",\n#                  choices = unique(stormNames$status))\n#    ),\n#    \n#    mainPanel(\n#      p(\"Histogram of Waiting Times\"),\n#      plotOutput(\"nameDist\"),\n#      \n#    )\n#  )\n#)\n\n#server <- function(input, output, session) {\n  \n  \n#  output$nameDist <- renderPlot({\n    \n#    str(input$stormStatus)\n    \n#    names_filtered <- filter(stormNames, status == input$stormStatus)\n#    hist(names_filtered$count)\n\n#  },\n#  width = 400, height = 300)\n  \n#  output$nameTable <- renderTable({\n    \n#    names_filtered <- filter(stormNames, status == input$stormStatus)\n#    head(names_filtered, 20)\n    \n#  })\n  \n#}\n\n#shinyApp(ui, server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Devon DiMatteo",
    "section": "",
    "text": "I am a student at State University of New York at Geneseo.\nI am interested in Data Analytics, Sustainability, and Economics\nI enjoy Music and Nature!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Devon DiMatteo",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo, 2023 - B.A./B.S. in Economics - Data Analytics"
  },
  {
    "objectID": "project-website.html#creating-the-model-in-python",
    "href": "project-website.html#creating-the-model-in-python",
    "title": "NCAA Basketball Regression",
    "section": "Creating the model in Python",
    "text": "Creating the model in Python\nThe first step is loading the dataset and the required packages\n\n\nCode\nlibrary(readxl)\ndf <- read_excel(\"C:\\\\Users\\\\Devon DiMatteo\\\\Desktop\\\\danl310df.xlsx\")\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\n\n\nThe packages that are used to create the model are numpy, pandas, and statsmodels.apu Next we pull the variables that will be used in the regression.\n\n\nCode\ndata=pd.read_excel(\"C:\\\\Users\\\\Devon DiMatteo\\\\Desktop\\\\danl310df.xlsx\")\ncbb_data=data.copy()\ncbb = cbb_data[[ \"W\", \"ADJOE\", \"ADJDE\", \"EFG_O\", \"EFG_D\", \"TOR\", \"TORD\", \"2P_O\",\"2P_D\", \"3P_O\",\"3P_D\", \"SEED\", \"WAB\" ]]\ncbb\n\n\n     W  ADJOE  ADJDE  EFG_O  EFG_D   TOR  ...  2P_O  2P_D  3P_O  3P_D  SEED   WAB\n0   29  121.0   89.7   54.7   44.0  19.3  ...  52.0  43.2  40.3  30.4     1   7.8\n1   31  118.9   90.2   54.9   44.9  17.2  ...  55.0  42.1  36.5  32.9     1   7.6\n2   31  111.6   86.2   53.3   41.5  20.3  ...  52.9  39.3  36.4  30.3     1   7.5\n3   35  115.9   84.5   50.6   44.8  18.3  ...  50.8  43.4  33.3  31.8     1   9.0\n4   25  107.6   85.0   51.1   43.0  20.1  ...  50.2  41.4  35.3  30.7     2   6.6\n..  ..    ...    ...    ...    ...   ...  ...   ...   ...   ...   ...   ...   ...\n63  19   90.6   95.7   45.7   45.2  22.7  ...  45.4  43.4  30.7  32.0    16 -11.5\n64  20   95.9   96.7   49.1   41.9  16.8  ...  46.0  40.5  36.7  30.0    16  -5.7\n65  20  108.1  111.2   54.4   52.6  20.3  ...  53.1  51.1  38.0  37.2    16  -8.6\n66  21   98.5   99.4   47.6   48.7  17.2  ...  46.2  46.9  33.6  34.7    16  -8.9\n67  12  100.1  109.7   48.5   47.8  19.8  ...  44.9  48.6  37.0  30.9    16 -15.6\n\n[68 rows x 13 columns]\n\n\nWe then split the features and the labels into different datasets using the .drop function\n\n\nCode\ncbb_features=cbb.drop(\"SEED\", axis=\"columns\")\ncbb_labels=cbb[\"SEED\"]\n\n\n\nLinear Regression Model\nFor the linear regression model we use scikit-learn software to train the machine learning model.\n\n\nCode\nfrom sklearn.linear_model import LinearRegression\nlin_reg=LinearRegression()\nlin_reg.fit(cbb_features, cbb_labels)\n\n\nLinearRegression()\n\n\n\n\nDecision Tree Model\nWe also use the scikit-learn software for the dicision tree regression\nThe following code is training the model:\n\n\nCode\nfrom sklearn.tree import DecisionTreeRegressor\ntree_reg=DecisionTreeRegressor()\ntree_reg.fit(cbb_features, cbb_labels)\n\n\nDecisionTreeRegressor()\n\n\n\n\nRandom Forest Model\nTraining the random forest model:\n\n\nCode\nfrom sklearn.ensemble import RandomForestRegressor\nforest_reg=RandomForestRegressor()\nforest_reg.fit(cbb_features,cbb_labels)\n\n\nRandomForestRegressor()"
  }
]